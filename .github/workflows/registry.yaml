name: Registries Scan/Sync

on:
  pull_request:
    types:
      - labeled

jobs:
  scanLabelAndApproval:
    if: github.event.label.name == 'registries-scan' && startsWith(github.event.pull_request.base.ref, 'release-v')
    runs-on: ubuntu-latest
    outputs:
      start_scan: ${{ steps.scan-check-approval.outputs.scan-approved }}
    steps:
      - name: Start Scan - Check if PR is approved
        id: scan-check-approval
        run: |
          START_SCAN=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews --jq '[.[] | select(.state == "APPROVED")] | length')
          if [[ "$START_SCAN" -gt 0 ]]; then
            echo "::set-output name=scan-approved::true"
          else
            echo "::set-output name=scan-approved::false"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  syncLabelAndApproval:
    if: github.event.label.name == 'registries-sync' && startsWith(github.event.pull_request.base.ref, 'release-v')
    runs-on: ubuntu-latest
    outputs:
      start_sync: ${{ steps.sync-check-approval.outputs.sync-approved }}
    steps:
      - name: Start Sync - Check if PR is approved
        id: sync-check-approval
        run: |
          START_SYNC=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews --jq '[.[] | select(.state == "APPROVED")] | length')
          if [[ "$START_SYNC" -gt 0 ]]; then
            echo "::set-output name=sync-approved::true"
          else
            echo "::set-output name=sync-approved::false"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  scan:
    needs: scanLabelAndApproval
    if: needs.scanLabelAndApproval.outputs.start_scan == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Read App Secrets
        continue-on-error: false
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/github/app-credentials appId | APP_ID ;
            secret/data/github/repo/${{ github.repository }}/github/app-credentials privateKey | PRIVATE_KEY ;

      - name: Create App Token
        continue-on-error: false
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Checkout
        continue-on-error: false
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Git Setup
        continue-on-error: false
        run: |
          echo "git global configuration"
          git config --global --add safe.directory "$PWD"
          echo $PATH >> $GITHUB_PATH
          git config --global user.email "${{ secrets.USER_GITHUB }}"
          git config --global user.name "rancherbot"
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}

      - name: Scan Images from Assets/;Docker;Staging
        run: |
          make pull-scripts
          LOG="DEBUG" ./bin/charts-build-scripts scan-registries

      - name: Push
        continue-on-error: false
        run: |
          git push origin ${{ github.event.pull_request.head.ref }}

  sync:
    needs: syncLabelAndApproval
    if: needs.syncLabelAndApproval.outputs.start_sync == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Read App Secrets
        continue-on-error: false
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/github/app-credentials appId | APP_ID ;
            secret/data/github/repo/${{ github.repository }}/github/app-credentials privateKey | PRIVATE_KEY ;

      - name: Create App Token
        continue-on-error: false
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Checkout
        continue-on-error: false
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Git Setup
        continue-on-error: false
        run: |
          echo "git global configuration"
          git config --global --add safe.directory "$PWD"
          echo $PATH >> $GITHUB_PATH
          git config --global user.email "${{ secrets.USER_GITHUB }}"
          git config --global user.name "rancherbot"
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git checkout ${{ github.event.pull_request.head.ref }}

      - name: Sync Registries
        continue-on-error: false
        env:
          PRIME_USER: ${{ secrets.REGISTRY_USERNAME }}
          PRIME_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          LOG: "DEBUG"
        run: |
          make pull-scripts
          ./bin/charts-build-scripts scan-registries
